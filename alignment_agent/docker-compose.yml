version: '3.8'

services:
  # Main IFC Semantic Agent service
  ifc-agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ifc-semantic-agent
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - CONFIG_PATH=/app/config/config.yaml
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
      - ./config:/app/config
    depends_on:
      - neo4j
      - redis
    networks:
      - ifc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: ifc-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - ifc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ifc-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ifc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Development service (optional)
  ifc-agent-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ifc-semantic-agent-dev
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - CONFIG_PATH=/app/config/config.yaml
      - LOG_LEVEL=DEBUG
      - DEVELOPMENT=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
    depends_on:
      - neo4j
      - redis
    networks:
      - ifc-network
    restart: "no"
    profiles:
      - dev

  # Jupyter Notebook for development (optional)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ifc-jupyter
    ports:
      - "8888:8888"
    environment:
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    command: >
      bash -c "pip install jupyter &&
               jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
               --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - ifc-network
    profiles:
      - dev

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ifc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ifc-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ifc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ifc-network
    profiles:
      - monitoring

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ifc-network:
    driver: bridge