[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ifc-semantic-agent"
version = "1.0.0"
description = "Intelligent IFC-Regulatory Semantic Alignment System using ReAct Framework"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "IFC Semantic Agent Team", email = "contact@ifc-semantic-agent.com"},
]
maintainers = [
    {name = "IFC Semantic Agent Team", email = "contact@ifc-semantic-agent.com"},
]
keywords = [
    "IFC", "BIM", "semantic alignment", "regulatory compliance", 
    "knowledge graph", "RAG", "ReAct", "NLP", "AI", "construction",
    "building codes", "semantic extraction", "multi-modal"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
dynamic = ["dependencies"]

[project.urls]
"Homepage" = "https://github.com/ifc-semantic-agent/ifc-semantic-agent"
"Bug Tracker" = "https://github.com/ifc-semantic-agent/ifc-semantic-agent/issues"
"Documentation" = "https://ifc-semantic-agent.readthedocs.io/"
"Source Code" = "https://github.com/ifc-semantic-agent/ifc-semantic-agent"
"Changelog" = "https://github.com/ifc-semantic-agent/ifc-semantic-agent/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0"
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.20.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0"
]
all = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.20.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0"
]

[project.scripts]
ifc-agent = "run_agent:main"
ifc-semantic-agent = "run_agent:main"

[tool.setuptools]
packages = ["core", "ifc_processing", "text_processing", "semantic_alignment", "knowledge_graph"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools.package-data]
"config" = ["*.yaml", "*.yml", "*.json"]
"data" = ["*.json", "*.yaml", "*.txt"]
"models" = ["*.pkl", "*.joblib", "*.bin"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["core", "ifc_processing", "text_processing", "semantic_alignment", "knowledge_graph"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
    "setup.py",
    "run_agent.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration